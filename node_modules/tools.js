var fmpConstants = require('fmp-constants');

/*
 * @UtilService
 */
var _areCoordinatesInRadius = function(x0, y0, x1, y1, radius) {
	var deltaX = x1 - x0;
	var deltaY = y1 - y0;

	// Si les cases sont en quinconce
	if (deltaX & 1 != 0) {
		// On cale la parité sur la 1ere case
		var pariteX = x0 & 1;
		pariteX = 0.5 - pariteX;
		deltaY += pariteX;
	}

	// console.log('pariteX: ' + pariteX + ', deltaX: ' + deltaX + ', deltaY: ' + deltaY);
	var sommeCotesAuCarre = (deltaX * deltaX) + (deltaY * deltaY);
	var radiusAuCarre = radius * radius;
	// console.log("sommeCotesAuCarre: " + sommeCotesAuCarre);
	// Le coup de radiusAuCarre + radius c pas très scientifique mais
	// ça marche jusqu'à 3 case de rayons, ce qui suffit au besoin
	// Apres ça marche plus fo trouver plus fin
	if (sommeCotesAuCarre < (radiusAuCarre + radius)) {
		return true;
	} else {
		return false;
	}
}

/*
 * @UtilService
 */
var areCoordinatesAdjacent = function(x0, y0, x1, y1) {
	return _areCoordinatesInRadius(x0, y0, x1, y1, 1);
}

/*
 * @UtilService
 * @return Un objet { x, y } des coordonnées cible
 */
var getCaseCoordsInOrientation = function(startCase, orientation) {
	var targetX = startCase.x;
	var targetY = startCase.y;

	var parite = startCase.x & 1;

	switch(orientation.value) {
		case fmpConstants.ORIENTATION.N.value:
			targetY = targetY - 1;
			break;
		case fmpConstants.ORIENTATION.NE.value:
			targetX = targetX + 1;
			targetY = targetY - (1 - parite);
			break;
		case fmpConstants.ORIENTATION.SE.value:
			targetX = targetX + 1;
			targetY = targetY + parite;
			break;
		case fmpConstants.ORIENTATION.S.value:
			targetY = targetY + 1;
			break;
		case fmpConstants.ORIENTATION.SO.value:
			targetX = targetX - 1;
			targetY = targetY + parite;
			break;
		case fmpConstants.ORIENTATION.NO.value:
			targetX = targetX - 1;
			targetY = targetY - (1 - parite);
			break;
		default:
			throw 'Orientation unknown: ' + JSON.stringify(orientation);
			break;
	}

	// return partie.getCase(targetX, targetY);
	return { x: targetX, y: targetY };
}
/*
 * @UtilService
 */
var getOrientation = function(startCase, targetCase) {
	var deltaX = targetCase.x - startCase.x;
	var deltaY = targetCase.y - startCase.y;

	if (deltaX == 0) {
		if (deltaY > 0) {
			return fmpConstants.ORIENTATION.S;
		} else {
			return fmpConstants.ORIENTATION.N;
		}
	} else {
		var pariteX = startCase.x & 1;
		if (pariteX == 0) {
			if (deltaY == 0) {
				if (deltaX > 0) {
					return fmpConstants.ORIENTATION.SE;
				} else {
					return fmpConstants.ORIENTATION.SO;
				}
			} else {
				if (deltaX > 0) {
					return fmpConstants.ORIENTATION.NE;
				} else {
					return fmpConstants.ORIENTATION.NO;
				}
			}
		} else {
			if (deltaY == 0) {
				if (deltaX > 0) {
					return fmpConstants.ORIENTATION.NE;
				} else {
					return fmpConstants.ORIENTATION.NO;
				}
			} else {
				if (deltaX > 0) {
					return fmpConstants.ORIENTATION.SE;
				} else {
					return fmpConstants.ORIENTATION.SO;
				}
			}
		}
	}
}

var areAdjacent = function(pieceOrCase1, pieceOrCase2) {
	if (pieceOrCase1.pieceType != null
		&& pieceOrCase1.pieceType.value == fmpConstants.PIECE_TYPE.BARGE.value) {
		if (pieceOrCase2.pieceType != null
			&& pieceOrCase2.pieceType.value == fmpConstants.PIECE_TYPE.BARGE.value) {
			// Les 2 pieces sont des barges
			var caseAvantBarge1Coords = getCoordsCaseAvantBarge(pieceOrCase1, pieceOrCase1.orientation);
			var caseAvantBarge2Coords = getCoordsCaseAvantBarge(pieceOrCase2, pieceOrCase2.orientation);

			return areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, pieceOrCase2.x, pieceOrCase2.y)
				|| areCoordinatesAdjacent(caseAvantBarge1Coords.x, caseAvantBarge1Coords.y, pieceOrCase2.x, pieceOrCase2.y)
				|| areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, caseAvantBarge2Coords.x, caseAvantBarge2Coords.y)
				|| areCoordinatesAdjacent(caseAvantBarge1Coords.x, caseAvantBarge1Coords.y , caseAvantBarge2Coords.x, caseAvantBarge2Coords.y);
		} else {
			// La piece1 est une barge mais pas la piece2
			var caseAvantBarge1Coords = getCoordsCaseAvantBarge(pieceOrCase1, pieceOrCase1.orientation);
			return areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, pieceOrCase2.x, pieceOrCase2.y)
				|| areCoordinatesAdjacent(caseAvantBarge1Coords.x, caseAvantBarge1Coords.y, pieceOrCase2.x, pieceOrCase2.y);
		}
	} else {
		if (pieceOrCase2.pieceType != null
			&& pieceOrCase2.pieceType.value == fmpConstants.PIECE_TYPE.BARGE.value) {
			// La piece2 est une barge mais pas la piece1
			var caseAvantBarge2Coords = getCoordsCaseAvantBarge(pieceOrCase2, pieceOrCase2.orientation);
			return areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, pieceOrCase2.x, pieceOrCase2.y)
				|| areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, caseAvantBarge2Coords.x, caseAvantBarge2Coords.y);
		} else {
			// La piece1 et la piece2 ne sont pas des barges
			return areCoordinatesAdjacent(pieceOrCase1.x, pieceOrCase1.y, pieceOrCase2.x, pieceOrCase2.y);
		}
	}
}

var getCoordsCaseAvantBarge = function(barge) {
	return getCaseCoordsInOrientation(barge, barge.orientation);
}

exports.areCoordinatesAdjacent = areCoordinatesAdjacent;
exports.getCaseCoordsInOrientation = getCaseCoordsInOrientation;
exports.getOrientation = getOrientation;
exports.areAdjacent = areAdjacent;
